# def dissimiliarity_pixel(pixel1 , pixel2 , i , j , x , y):
#     r1 = pixel1[0]
#     g1 = pixel1[1]
#     b1 = pixel1[2]
    
#     r2 = pixel2[0]
#     g2 = pixel2[1]
#     b2 = pixel2[2]
#     return (( (r1-r2)**2 + (g1-g2)**2 + (b1-b2)**2 )**0.5) + 0.01*(((i-j)**2 + (x-y)**2)**0.5)

# def pixel_affinity(pixel1, pixel2 , i , j , x , y ):
#     sij = dissimiliarity_pixel(pixel1, pixel2, i , j , x , y)

#     ## -1(pixelDissimilarity)/2(sigma)**2
#     exponent = -(sij/1225)

#     affinity = math.e**exponent

#     return round(affinity, 5)

# def w_matrix(img11):
#     rows = 4096
#     columns = 4096

#     W = np.zeros((rows, columns), dtype=float)

#     original_rows = 64 
#     original_columns = 64

#     for i in range(original_rows):
#         for j in range(original_columns):
#             pixel1 = img11[i][j]  
#             index = i * original_columns + j  # Calculate the index of the pixel in the flattened W matrix
            
#             for x in range(original_rows):
#                 for y in range(original_columns):
#                     pixel2 = img11[x][y]
#                     index2 = x * original_columns + y
                    
#                     affinity = pixel_affinity(pixel1, pixel2 , i , j , x , y)
                    
#                     if(index == index2): W[index][index2] = 0
#                     else: W[index][index2] = affinity
#     return W

# W = w_matrix(image1_64x64)
# W